====
Infix op
====

process = 1 + 1 * 2 << 4 | 6 >= _ @ 7 ^ 2;

---
(program
  (definition
    name: (identifier)
    value: (infix
      left: (infix
        left: (infix
          left: (int)
          operator: (add_op)
          right: (infix
            left: (infix left: (int) operator: (mult_op) right: (int))
            operator: (lshift_op)
            right: (int)))
        operator: (or_op)
        right: (int))
      operator: (ge_op)
      right: (infix
        left: (infix left: (wire) operator: (delay_op) right: (int))
        operator: (pow_op)
        right: (int)))))

====
Prefix op
====

process = |(*(2,3), @(_', 2)) : mem;

---
(program
  (definition
    name: (identifier)
    value: (sequential
      left: (prefix
        operator: (or_op)
        left: (prefix operator: (mult_op) left: (int) right: (int))
        right: (prefix
          operator: (delay_op)
          left: (modifier operand: (wire) operator: (one_sample_delay_op))
          right: (int)))
      right: (mem))))

====
Partial op
====

process = |(*(2), @(_')) : mem;

---
(program
  (definition
    name: (identifier)
    value: (sequential
      left: (prefix
        operator: (or_op)
        left: (partial operator: (mult_op) operand: (int))
        right: (partial
          operator: (delay_op)
          operand: (modifier operand: (wire) operator: (one_sample_delay_op))))
      right: (mem))))

====
Math primitives
====

unary_a = exp(log(log10(sqrt(abs(floor(ceil(rint(round(float(int(1.0)))))))))));
unary_b = acos(asin(atan(cos(sin(tan(3.14))))));
binary = pow(min(max(fmod(remainder(atan2(1.0, 2.0), 3.0), 4.0), 5.0), 6.0), _);

---
(program
  (definition
    (identifier)
    (prim1 (exp_op)
      (prim1 (log_op)
        (prim1 (log10_op)
          (prim1 (sqrt_op)
            (prim1 (abs_op)
              (prim1 (floor_op)
                (prim1 (ceil_op)
                  (prim1 (rint_op)
                    (prim1 (round_op)
                      (prim1
                        (float_cast)
                        (prim1 (int_cast) (real)))))))))))))
  (definition
    (identifier)
    (prim1 (acos_op)
      (prim1 (asin_op)
        (prim1 (atan_op)
          (prim1 (cos_op)
            (prim1 (sin_op)
              (prim1 (tan_op) (real))))))))
  (definition
    (identifier)
    (prim2 (pow_fun_op)
      (arguments
        (prim2 (min_op)
          (arguments
            (prim2 (max_op)
              (arguments
                (prim2 (fmod_op)
                  (arguments
                    (prim2 (remainder_op)
                      (arguments
                        (prim2 (atan2_op)
                          (arguments (real) (real)))
                        (real)))
                    (real)))
                (real)))
            (real)))
        (wire)))))
  
====
Special primitives
====

process = prefix(attach(enable(control(1, 2), 3), 4), _);

---
(program
  (definition
    (identifier)
    (prim2 (prefix_op)
      (arguments
        (prim2 (attach_op)
          (arguments
            (prim2 (enable_op)
              (arguments
                (prim2
                  (control_op)
                  (arguments (int) (int)))
                (int)))
            (int)))
        (wire)))))
