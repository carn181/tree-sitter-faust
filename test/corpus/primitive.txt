====
Infix op
====

process = 1 + 1 * 2 << 4 | 6 >= _ @ 7 ^ 2;

---
(program
  (definition
    name: (id)
    value: (infix
      left: (infix
        left: (infix
          left: (int)
          operator: (add)
          right: (infix
            left: (infix left: (int) operator: (mult) right: (int))
            operator: (lshift)
            right: (int)))
        operator: (or)
        right: (int))
      operator: (ge)
      right: (infix
        left: (infix left: (wire) operator: (delay) right: (int))
        operator: (pow)
        right: (int)))))

====
Prefix op
====

process = |(*(2,3), @(_', 2)) : mem;

---
(program
  (definition
    name: (id)
    value: (sequential
      left: (prefix
        operator: (or)
        left: (prefix operator: (mult) left: (int) right: (int))
        right: (prefix
          operator: (delay)
          left: (modifier operand: (wire) operator: (one_sample_delay))
          right: (int)))
      right: (mem))))

====
Partial op
====

process = |(*(2), @(_')) : mem;

---
(program
  (definition
    name: (id)
    value: (sequential
      left: (prefix
        operator: (or)
        left: (partial operator: (mult) operand: (int))
        right: (partial
          operator: (delay)
          operand: (modifier operand: (wire) operator: (one_sample_delay))))
      right: (mem))))

====
Math primitives
====

unary_a = exp(log(log10(sqrt(abs(floor(ceil(rint(round(float(int(1.0)))))))))));
unary_b = acos(asin(atan(cos(sin(tan(3.14))))));
binary = pow(min(max(fmod(remainder(atan2(1.0, 2.0), 3.0), 4.0), 5.0), 6.0), _);

---
(program
  (definition (id)
    (prim1 (exp)
      (prim1 (log)
        (prim1 (log10)
          (prim1 (sqrt)
            (prim1 (abs)
              (prim1 (floor)
                (prim1 (ceil)
                  (prim1 (rint)
                    (prim1 (round)
                      (prim1 (float_cast)
                        (prim1 (int_cast) (real)))))))))))))
  (definition (id)
    (prim1 (acos)
      (prim1 (asin)
        (prim1 (atan)
          (prim1 (cos)
            (prim1 (sin)
              (prim1 (tan) (real))))))))
  (definition (id)
    (prim2 (pow_fun)
      (arguments
        (prim2 (min)
          (arguments
            (prim2 (max)
              (arguments
                (prim2 (fmod)
                  (arguments
                    (prim2 (remainder)
                      (arguments
                        (prim2 (atan2)
                          (arguments (real) (real)))
                        (real)))
                    (real)))
                (real)))
            (real)))
        (wire)))))
  
====
Special binary primitives
====

process = prefix(attach(enable(control(_, _), _), _), _);

---
(program
  (definition (id)
    (prim2 (prefix_prim)
      (arguments
        (prim2 (attach)
          (arguments
            (prim2 (enable)
              (arguments
                (prim2 (control)
                  (arguments (wire) (wire)))
                (wire)))
            (wire)))
        (wire)))))

====
Tables
====

foo = rdtable(n,s,r) : _;
bar = _ : rwtable(n,s,w,_,r) : _;

---
(program
  (definition (id)
    (sequential
      (prim3 (rdtable) (arguments (id) (id) (id)))
      (wire)))
  (definition (id)
    (sequential
      (wire)
      (sequential
        (prim5 (rwtable) (arguments (id) (id) (id) (wire) (id)))
        (wire)))))
