====
Empty
====

---
(program)

====
Comment
====

// Parse as a comment: `process = +(1);`
/**
Everything in here should parse as a comment:
```
    declare complex_string "a\"\n\r!@#$%^&*(),<.>?/~`{}\|\';:";
    process = +(1);
```
*/

var = 1; // Comment at the end of a line.
process = var; /* Comment at the end of a line. */

// Bye! /*still in line comment...*/ // still in line comment...
---
(program
  (comment)
  (comment)
  (definition (id) (int))
  (comment)
  (definition (id) (id))
  (comment)
  (comment))

====
Variable assignment
====

var = ::foo::bar::baz;
negated_var = -var;

---
(program
  (definition name: (id) value: (id))
  (definition name: (id) value: (negate_id (id))))

====
Function definition
====

identity(var) = var;
identity ( var ) = var ;

---
(program
  (function_definition (id) (parameters (parameter)) (id))
  (function_definition (id) (parameters (parameter)) (id)))

====
Lambda function definition
====

linear2db = \(x).(20*log10(x));

---
(program
  (definition
    name: (id)
    value: (lambda
      (parameters (parameter))
      value: (infix
        left: (int)
        operator: (mult)
        right: (prim1 primitive: (log10) argument: (id))))))

====
Metadata
====

declare name "Noise";
declare complex_string "a\"\n\r!@#$%^&*(),<.>?/~`{}\|\';:";

declare add author "Karl Hiner";
add = +;

---
(program
  (global_metadata key: (id) value: (string))
  (global_metadata key: (id) value: (string))
  (function_metadata function_name: (id) key: (id) value: (string))
  (definition name: (id) value: (add)))

====
Import
====

import("stdfaust.lib");
import ( "stdfaust.lib" ) ;
---
(program
  (file_import filename: (string))
  (file_import filename: (string)))

====
Variant
====

fixedpointprecision import("stdfaust.lib");

singleprecision int_part(idv) = idv : _,!;
doubleprecision quadprecision int_part(idv) = int(idv);

---
(program
  (file_import (variants (fixed_point_precision)) (string))
  (function_definition
    (variants (single_precision))
    (id)
    (parameters (parameter))
    (sequential (id) (parallel (wire) (cut))))
  (function_definition
    (variants (double_precision) (quad_precision))
    (id)
    (parameters (parameter))
    (prim1 (int_cast) (id))))

====
Memory
====

// These are semantically equivalent.
var1 = mem;
var2 = @(var1);
process = var2';

---
(program
  (comment)
  (definition (id) (mem))
  (definition (id) (partial (delay) (id)))
  (definition (id) (modifier (id) (one_sample_delay))))

===
Explicit substitution
===

process = component("freeverb.dsp")[foo(x) = 1; bar = _;];

---
(program
  (definition
    name: (id)
    value: (substitution
      expression: (component filename: (string))
      (substitutions
        (function_definition name: (id) (parameters (parameter)) value: (int))
        (definition name: (id) value: (wire))))))

===
Component
===

process = component("karplus32.dsp") : component("freeverb.dsp");

---
(program
  (definition
    name: (id)
    value: (sequential
      left: (component filename: (string))
      right: (component filename: (string)))))

===
Library
===

fl = library("filters.lib");
process = fl.lowpass;

---
(program
  (definition
    name: (id)
    value: (library filename: (string)))
  (definition
    name: (id)
    value: (access environment: (id) definition: (id))))

===
Waveform
===

triangleWave = waveform{0,0.5,1,0.5,0,-0.5,-1,-.5};

---
(program
  (definition (id)
    (waveform
      (values
        (int)
        (real)
        (int)
        (real)
        (int)
        (real)
        (int)
        (real)))))

===
Route
===

fake_route = route(2,2);
full_route = route(2,2,1,2,2,1);

---
(program
  (definition
    name: (id)
    value: (route num_inputs: (int) num_outputs: (int)))
  (definition
    name: (id)
    value: (route
      num_inputs: (int)
      num_outputs: (int)
      expression: (parallel
        left: (int)
        right: (parallel
          left: (int)
          right: (parallel left: (int) right: (int)))))))
