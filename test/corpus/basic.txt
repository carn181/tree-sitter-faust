====
Empty
====

---
(source_file)

====
Comment
====

// Parse as a comment: `process = +(1);`
/**
Everything in here should parse as a comment:
```
    declare complex_string "a\"\n\r!@#$%^&*(),<.>?/~`{}\|\';:";
    process = +(1);
```
*/

var = 1; // Comment at the end of a line.
process = var; /* Comment at the end of a line. */

// Bye! /*still in line comment...*/ // still in line comment...
---
(source_file
  (comment)
  (comment)
  (definition
    (identifier)
    (int))
  (comment)
  (definition
    (identifier)
    (identifier))
  (comment)
  (comment))

====
Namespaced variable assignment
====

process = ::foo::bar::baz;

---
(source_file
  (definition
    (identifier)
    (identifier)))

====
Prefix op
====

process = +(1);

---
(source_file
  (definition
    (identifier)
    (prefix_op
      (op
        (add))
      (int))))

====
Infix op
====

process = 1 + 1;

---
(source_file
  (definition
    (identifier)
    (infix_op
      (int)
      (op
        (add))
      (int))))

====
Function definition
====

identity(var) = var;
identity ( var ) = var ;

---
(source_file
  (definition
    (identifier)
    (params
      (parameter))
    (identifier))
  (definition
    (identifier)
    (params
      (parameter))
    (identifier)))

====
Global metadata
====

declare name "Noise";

---
(source_file
  (global_metadata
    (metadata_key)
    (string)))

====
Complex string
====

declare complex_string "a\"\n\r!@#$%^&*(),<.>?/~`{}\|\';:";

---
(source_file
  (global_metadata
    (metadata_key)
    (string)))

====
Import
====

import("stdfaust.lib");
import ( "stdfaust.lib" ) ;
---
(source_file
  (file_import
    (string))
  (file_import
    (string)))

====
Memory
====

// These are semantically equivalent.
var1 = mem;
var2 = @(var1);
process = var2';

---
(source_file
  (comment)
  (definition
    (identifier)
      (mem))
  (definition
    (identifier)
    (prefix_op
      (op
        (delay))
      (identifier)))
  (definition
    (identifier)
    (modifier_op
      (identifier)
      (one_sample_delay))))
